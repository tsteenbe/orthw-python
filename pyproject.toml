[build-system]
    requires = ["poetry-core"]
    build-backend = "poetry.core.masonry.api"

[tool.poetry]
    name = "orthw"
    version = "0.1.1"
    description = "orthw is a python app designed to simplify and speed up common tasks performed when processing ort scan results. It supports a number of commands, which can be run in the terminal."
    authors = ["The ORTHW Project Authors"]
    maintainers = [
        "Frank Viernau <frank_viernau@epam.com>",
        "Helio Chissini de Castro <heliocastro@gmail.com>",
        "Thomas Steenbergen <opensource@steenbe.nl>"
    ]
    readme = "README.md"
    license = "Apache-2.0"
    packages = [{ include = "orthw", from = "src" }]
    keywords = [
        "ort",
        "orthw",
        "compliance",
        "open source license compliance",
        "open source licensing",
        "automation"
    ]
    classifiers = [
        "Development Status :: 3 - Alpha",
        "Environment :: Console",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ]

[tool.poetry.scripts]
    orthw = "orthw.orthw:main"

[tool.poetry.dependencies]
    python = "^3.10"
    click = "^8.1.7"
    rich = "^13.7.1"
    dict2obj = "^1.2.0"
    psycopg2-binary = "^2.9.9"
    gitpython = "^3.1.43"
    jinja2 = "^3.1.4"
    python-dotenv = "^1.0.1"
    appdirs = "^1.4.4"
    toml = "^0.10.2"
    docker = "^7.1.0"
    importlib-metadata = "^7.2.1"
    pyyaml = "^6.0.1"
    pydantic = "^2.7.4"
    pydantic-settings = "^2.3.4"
    yaml-settings-pydantic = "^2.0.2"
    requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
    pytest-cov = "^4.1.0"
    pre-commit = "^3.7.1"
    pycodestyle = "^2.12.0"
    pytest-mypy = "^0.10.3"
    ruff = "^0.1.13"
    mkdocs-material = "^9.5.27"
    types-pyyaml = "^6.0.12.20240311"
    mypy = "^1.10.1"
    types-toml = "^0.10.8.7"
    types-requests = "^2.32.0.20240622"
twine = "^5.1.1"

[tool.pytest.ini_options]
    addopts = ["--import-mode=importlib"]
    log_cli = true
    log_cli_level = "INFO"
    pythonpath = "src"

[tool.pylint.messages_control]
    disable = [
        "abstract-method",
        "arguments-differ",
        "attribute-defined-outside-init",
        "blacklisted-name",
        "chained-comparison",
        "duplicate-code",
        "eval-used",
        "exec-used",
        "expression-not-assigned",
        "fixme",
        "global-statement",
        "invalid-name",
        "import-error",
        "logging-fstring-interpolation",
        "missing-docstring",
        "no-member",
        "no-name-in-module",
        "protected-access",
        "redefined-argument-from-local",
        "redefined-outer-name",
        "reimported",
        "stop-iteration-return",
        "too-few-public-methods",
        "too-many-ancestors",
        "too-many-arguments",
        "too-many-branches",
        "too-many-instance-attributes",
        "too-many-lines",
        "too-many-locals",
        "too-many-return-statements",
        "too-many-statements",
        "unexpected-special-method-signature",
        "unspecified-encoding",
    ]

[tool.mypy]
    plugins = [
        "pydantic.mypy",
    ]

    check_untyped_defs = true
    disallow_any_generics = true
    disallow_untyped_defs = true
    disallow_untyped_calls = false
    follow_imports = "normal"
    ignore_missing_imports = true
    no_implicit_reexport = true
    strict_optional = true
    warn_redundant_casts = true
    warn_unused_ignores = true

[tool.pydantic-mypy]
    init_forbid_extra = true
    init_typed = true
    warn_required_dynamic_aliases = true

[tool.ruff.mccabe]
    # Unlike Flake8, default to a complexity level of 10.
    max-complexity = 10

[tool.ruff]
    fix = true
    line-length = 120
    ignore = [
        'N802',   # function name should be lowercase
        'SIM105', # Suggest contextlib instead of try/except with pass
    ]
    extend-select = [
        "E",   # pycodestyle error
        "W",   # pycodestyle warning
        "F",   # pyflakes
        "A",   # flakes8-builtins
        "COM", # flakes8-commas
        "C4",  # flake8-comprehensions
        "Q",   # flake8-quotes
        "SIM", # flake8-simplify
        "PTH", # flake8-use-pathlib
        "I",   # isort
        "N",   # pep8 naming
        "UP",  # pyupgrade
        "S",   # bandit
    ]

    # Exclude a variety of commonly ignored directories.
    extend-exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "venv",
    ]
    per-file-ignores = {}

    # Allow unused variables when underscore-prefixed.
    dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

    # Assume Python 3.10.
    target-version = "py310"

[tool.ruff.flake8-tidy-imports]
    ban-relative-imports = "all"

[tool.ruff.lint.isort]
    required-imports = ["from __future__ import annotations"]
    # use_parentheses = true
    # line_length = 120

[tool.pyright]
    reportUnboundVariable = false
